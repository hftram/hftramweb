from django.shortcuts import render, render_to_response
from data.models import Data, JSONModel, JSONModel_Tram
from forms import DataForm
from forms import JSONModelForm
from forms import JSONModel_Tram_Form

from article.models import Article
from article.forms import ArticleForm

from django.http import HttpResponseRedirect
from django.core.context_processors import csrf
from django.utils.encoding import smart_str
from django.core.files import File
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required


import random
import datetime
import time


# Create your views here.
@login_required(login_url='/accounts/login/')
def json_upload(request):
    if request.POST:
        form = JSONModelForm(request.POST)
        form.save()

    form = JSONModelForm()

    args = {}
    args.update(csrf(request))
    args['form'] = form

    return render_to_response('upload_json.html', args)

# Create your views here.
@login_required(login_url='/accounts/login/')
def tram_data_upload(request):
    if request.POST:
        form = JSONModel_Tram_Form(request.POST)
        form.save()

    form = JSONModel_Tram_Form()

    args = {}
    args.update(csrf(request))
    args['form'] = form

    return render_to_response('upload_tram_json.html', args)	
	
	

def json_test(request):
    json_data = JSONModel.objects.get(id=2).json_model
#    a = sum(json_data["key_1"])
#    return render_to_response('json_test.html', {'file': a})
    return render_to_response('json_test.html', {'file': json_data["id_1"]})




def demo_piechart(request):
    """
    pieChart page
    """
    xdata = ["Apple", "Apricot", "Avocado", "Banana", "Boysenberries", "Blueberries", "Dates", "Grapefruit", "Kiwi", "Lemon"]
    ydata = [52, 48, 160, 94, 75, 71, 490, 82, 46, 17]

    color_list = ['#5d8aa8', '#e32636', '#efdecd', '#ffbf00', '#ff033e', '#a4c639', '#b2beb5', '#8db600', '#7fffd4', '#ff007f', '#ff55a3', '#5f9ea0']
    extra_serie = {
        "tooltip": {"y_start": "", "y_end": " cal"},
        "color_list": color_list
    }
    chartdata = {'x': xdata, 'y1': ydata, 'extra1': extra_serie}
    charttype = "pieChart"
    chartcontainer = 'piechart_container'  # container name

    data = {
        'charttype': charttype,
        'chartdata': chartdata,
        'chartcontainer': chartcontainer,
        'extra': {
            'x_is_date': False,
            'x_axis_format': '',
            'tag_script_js': True,
            'jquery_on_ready': False,
        }
    }
    return render_to_response('piechart.html', data)


def table(request):
	json_data = JSONModel.objects.last().json_model
	names = []

	#add the names of the data set to the names array
	for it in range(1, len(json_data)+1):
		names.append(json_data["id_"+str(it)]['name'])


	#get the data values for each row
	data = []
	for cur_row in range(0, len(json_data["id_1"]["data"])):

		row = []

		for cur_data in range(1, len(json_data)+1):

			if(cur_data == 1):
				timestamp = int(json_data["id_"+str(cur_data)]['data'][cur_row])
				value = datetime.datetime.fromtimestamp(timestamp / 1000)
				row.append(value.strftime('%Y-%m-%d %H:%M:%S'))

			else:
				row.append(json_data["id_"+str(cur_data)]['data'][cur_row])


		data.append(row)

	return render_to_response('table.html', {'names': names, 'data':data})


def graph_multi(request, start, end):
    json_data = JSONModel.objects.last().json_model

    xdata = map(int, json_data['id_1']['data'])
   
    tooltip_date = "%d %b %Y %H:%M:%S %p"
    extra_serie = {"tooltip": {"y_start": "The value is ", "y_end": " "},
                   "date_format": tooltip_date}
	
    chartdata = {
        'x': xdata,
    }
	
	
    for i in range(int(start), int(end) + 1):
	chartdata["name"+str(i)] = json_data["id_"+str(i)]["name"]
	chartdata["y"+str(i)] = map(float, json_data["id_"+str(i)]['data'])
	chartdata["extra"+str(i)] = extra_serie
		
	
	
	
	
    charttype = "lineWithFocusChart"
    chartcontainer = 'linewithfocuschart_container'  # container name
    data = {
        'charttype': charttype,
        'chartdata': chartdata,
        'chartcontainer': chartcontainer,
        'extra': {
            'x_is_date': True,
            'tag_script_js': False,
            'jquery_on_ready': False,
        }
    }
    return render_to_response('linewithfocuschart.html', data)
	
	
	
	
def graph(request, data_id):
    """
    graph the data page
    """

    json_data = JSONModel.objects.last().json_model

    id = "id_" + str(data_id)

    xdata = map(int, json_data['id_1']['data'])
    ydata = map(float, json_data[id]['data'])

    tooltip_date = "%d %b %Y %H:%M:%S %p"
    extra_serie = {"tooltip": {"y_start": "The value is ", "y_end": " "},
                   "date_format": tooltip_date}

    chartdata = {
        'x': xdata,
        'name1': json_data[id]['name'], 'y1': ydata, 'extra1': extra_serie,
    }

    charttype = "lineWithFocusChart"
    chartcontainer = 'linewithfocuschart_container'  # container name
    data = {
        'charttype': charttype,
        'chartdata': chartdata,
        'chartcontainer': chartcontainer,
        'extra': {
            'x_is_date': True,
            'tag_script_js': False,
            'jquery_on_ready': False,
        }
    }
    return render_to_response('linewithfocuschart.html', data)

	
	
@login_required(login_url='/accounts/login/')
def tram_info(request):
	
    if request.POST:
        form = ArticleForm(request.POST)
        form.save()
    
    json_data = JSONModel_Tram.objects.last().tram_info
	
    form = {}
    form.update(csrf(request))
    form['user_name'] = str(request.user.username)
    form['form'] = ArticleForm()
	
    command = str(Article.objects.last()) 
    form['last_command'] = str(command)
    received_command = str(Article.objects.last()).lower()	    

    if("move" in received_command or "measure" in received_command or "wait" in received_command or "update_autonomous" in received_command or "disable_autonomous" in received_command or "enable_autonomous" in received_command or "accl_tol" in received_command or "msr_tol" in received_command or "accl_sen" in received_command):	
        form['is_valid'] = "The last command was valid."

    else:
	form['is_valid'] = "The last command was not valid please enter a valid command."
	
	
	
    form['name'] = "\n      SDP14: Team REST"
    form['position'] = json_data['position']
    form['position_percentage'] = json_data['pos_percentage']
    form['battery_info'] = json_data['battery_info']
    form['timestamp'] = json_data['timestamp']
    form['current_move'] = json_data['command_info']['current_command']
    form['current_move_status'] = json_data['command_info']['status']
	
    accel_data = 0;
	
    if(int(json_data['accelerometer']) != 0 or int(json_data['accelerometer']) !=1 or int(json_data['accelerometer']) != 2):
    	accel_data = 0;
    else:
	accel_data = json_data['accelerometer']
	
    form['accelerometer'] = int(json_data['accelerometer'])
    command = str(Article.objects.last()) 
    form['command_is'] = command
	
    return render_to_response('tram_info.html', form)
	
	

##def demo_linewithfocuschart(request):
##    """
##    linewithfocuschart page
##    """
##    nb_element = 1000
##    start_time = int(time.mktime(datetime.datetime(2012, 6, 1).timetuple()) * 1000)
##
##    xdata = range(nb_element)
##    xdata = map(lambda x: start_time + x * 1000000000, xdata)
##    ydata = [i + random.randint(1, 10) for i in range(nb_element)]
##    ydata2 = map(lambda x: x * 2, ydata)
##    ydata3 = map(lambda x: x * 3, ydata)
##    ydata4 = map(lambda x: x * 4, ydata)
##
##    tooltip_date = "%d %b %Y %H:%M:%S %p"
##    extra_serie = {"tooltip": {"y_start": "There are ", "y_end": " calls"},
##                   "date_format": tooltip_date}
##
##    chartdata = {
##        'x': xdata,
##        'name1': 'series 1', 'y1': ydata, 'extra1': extra_serie,
##        'name2': 'series 2', 'y2': ydata2, 'extra2': extra_serie,
##        'name3': 'series 3', 'y3': ydata3, 'extra3': extra_serie,
##        'name4': 'series 4', 'y4': ydata4, 'extra4': extra_serie
##    }
##    charttype = "lineWithFocusChart"
##    chartcontainer = 'linewithfocuschart_container'  # container name
##    data = {
##        'charttype': charttype,
##        'chartdata': chartdata,
##        'chartcontainer': chartcontainer,
##        'extra': {
##            'x_is_date': True,
##            'x_axis_format': '%d %b %Y %H',
##            'tag_script_js': True,
##            'jquery_on_ready': True,
##        }
##    }
##    return render_to_response('linewithfocuschart.html', data)
